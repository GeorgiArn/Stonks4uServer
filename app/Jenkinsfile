void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ],
  ]);
}

pipeline {
  agent {
    label 'docker-agent'
  }
  environment {
    DOCKERHUB_CREDENTIALS = credentials('geopog-dockerhub')
  }
  stages {
    stage('Build') {
      steps {
        setBuildStatus("Building", "PENDING");
        
        sh 'mv /home/jenkins/.env ./app'
        sh 'npm install --prefix ./app/'
      }
    }
    stage('Test') {
      steps {
        setBuildStatus("Testing", "PENDING");

        sh 'npm run --prefix ./app/ test'
      }
    }
    stage('Deploy') {
      steps {
        setBuildStatus("Deploying", "PENDING");

        sh 'docker build -t geopog/stonks4u-server ./app'
        sh 'docker image prune --force'
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
        sh 'docker push geopog/stonks4u-server'

        sshagent(['prod-root']) {      
          sh 'docker context create prod --docker "host=ssh://root@138.68.91.235"'
          sh 'docker-compose --context prod -f ./app/docker-compose.yaml pull'
          sh 'docker-compose --context prod -f ./app/docker-compose.yaml up --force-recreate -d'
          sh 'docker --context prod image prune --force'
        }
      }
    }
  }
  post {
    success {
      setBuildStatus("CI/CD complete", "SUCCESS");
    }
    failure {
      setBuildStatus("CI/CD failed", "FAILURE")
    }
    always {
      sh 'docker logout'
    }
  }
}